# 1
xor(1, 0) + xor(0, 0) + xor(0, 1) + xor(1, 1)

1 ‚äª 0 # r√≥wnie≈º \xor + tab

wiel(x) = x^3 + 4x^2 + 7x + 2

wiel(2)

# prosta wektoryzacja oblicze≈Ñ
wiel.([0, 0.5, 1.1, tan(0.3), 2 - im])

# tak mo≈ºna definiowaƒá funkcje, ale r√≥wnie≈º tak
function wiel2(x)
    return x^3 + 4x^2 + 7x + 2
end

# albo tak - wykorzystuje tzw. funkcjƒô anonimowƒÖ - wiƒôcej na wyk≈Çadzie
wiel3 = x -> x^3 + 4x^2 + 7x + 2

# uwaga - funkcje to zmienna, kt√≥re sƒÖ const - sta≈Çe, nie mo≈ºna zmieniaƒá ich warto≈õci, redefiniowaƒá
# takie co≈õ nie przejdzie

g(x) = x
g(x) = x^2 # ERROR

# nawet takie unixy dzia≈ÇajƒÖ
ü•∞ = NaN

true | false # true or false = true

true & false # true and true = false

# 2

#= zdefiniujmy sobie funkcjƒô dwuargumentowƒÖ - wybieramy sobie z,
ale tak≈ºe liczbƒô poczƒÖtkowych wyraz√≥w, kt√≥re sumujemy =#
zeta(z, n) = sum((1 / i)^z for i in 1:n)

zeta(2, 10)
zeta(2, 100)

# 2b
func2(n) = prod(1 + 0.5^(2^i) for i in 0:n)

func2(10)
func2(50)

# 2c
sum((j for j in i:100) for i in 1:100)
sum(sum(k:100) for k in 1:100) # to niez≈Ça, a≈º sam siƒô zdziwi≈Çem, ≈ºe takie co≈õ napisa≈Çem :) - mo≈ºna z jednƒÖ zmiennƒÖ

# powy≈ºsza sumka to tak, jak pokaza≈Çem po prostu suma kwadrat√≥w natural√≥w od 1 do 100
sum(i^2 for i in 1:100)

# ca≈Çeczka - suma p√≥l prostokƒÖt√≥w 
sum(sin(x) * 0.01 for x in 0:0.01:pi) # u mnie to dzia≈Ça -> pa≈Ñstwo, kt√≥rzy mieli z tym problem muslie mieƒá ≈∫le zdefiniowane zmienne
# mo≈ºe co≈õ zdefiniowane wcze≈õniej spowodowa≈Ço, ≈ºe wszystko przesta≈Ço stykaƒá

# 3

A = [1 2;3 4]
B = [im 1+2im; 2- im 0]
v = [1 1]
g = [1//2; 3//4]
z = [2.0, 0.0]
c = -1


# iloczyn skalarny
using LinearAlgebra

dot(v, g)

# albo 

v * g # czyli zwyk≈Çe mno≈ºenie wektor√≥w - jeden le≈ºy, drugi stoi

v * A' * g

# wywo≈Çujemy funkcjƒô cosh na ka≈ºym elemencie macierzy A
cosh.(A)

# ka≈ºdy element A podnosimy do kwadratu a nastƒôpnie do ka≈ºdego elementu dodajemy skalar c
A.^2 .+ c
